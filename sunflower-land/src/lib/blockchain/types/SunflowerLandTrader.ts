/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Cancelled = ContractEventLog<{
  sellerFarmId: string;
  listingId: string;
  resourceId: string;
  resourceAmount: string;
  sfl: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type Listed = ContractEventLog<{
  sellerFarmId: string;
  listingId: string;
  resourceId: string;
  resourceAmount: string;
  sfl: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type Purchased = ContractEventLog<{
  sellerFarmId: string;
  buyerFarmId: string;
  listingId: string;
  resourceId: string;
  resourceAmount: string;
  sfl: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;

export interface SunflowerLandTrader extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SunflowerLandTrader;
  clone(): SunflowerLandTrader;
  methods: {
    addGameRole(_game: string): NonPayableTransactionObject<void>;

    addLimitBatch(
      _resourceIds: (number | string | BN)[],
      _limits: (number | string | BN)[]
    ): NonPayableTransactionObject<boolean>;

    cancel(
      _listingId: number | string | BN,
      _farmId: number | string | BN
    ): NonPayableTransactionObject<void>;

    dailyListingCount(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    farmSlots(
      arg0: number | string | BN,
      arg1: number | string | BN
    ): NonPayableTransactionObject<string>;

    getFarmSlots(
      _farmId: number | string | BN,
      _slots: number | string | BN
    ): NonPayableTransactionObject<
      {
        status: string;
        listingId: string;
        farmId: string;
        farmAddress: string;
        resourceId: string;
        resourceAmount: string;
        sfl: string;
        tax: string;
        listedAt: string;
        cancelledAt: string;
        purchasedAt: string;
        purchasedById: string;
      }[]
    >;

    getLimitBatch(
      _resourceIds: (number | string | BN)[]
    ): NonPayableTransactionObject<string[]>;

    getListingsBatch(
      _listingIds: (number | string | BN)[]
    ): NonPayableTransactionObject<
      {
        status: string;
        listingId: string;
        farmId: string;
        farmAddress: string;
        resourceId: string;
        resourceAmount: string;
        sfl: string;
        tax: string;
        listedAt: string;
        cancelledAt: string;
        purchasedAt: string;
        purchasedById: string;
      }[]
    >;

    getRemainingListings(
      _farmId: number | string | BN
    ): NonPayableTransactionObject<string>;

    list(
      _slotId: number | string | BN,
      _farmId: number | string | BN,
      _farmAddress: string,
      _resourceId: number | string | BN,
      _resourceAmount: number | string | BN,
      _sfl: number | string | BN,
      _tax: number | string | BN
    ): NonPayableTransactionObject<void>;

    listings(arg0: number | string | BN): NonPayableTransactionObject<{
      status: string;
      listingId: string;
      farmId: string;
      farmAddress: string;
      resourceId: string;
      resourceAmount: string;
      sfl: string;
      tax: string;
      listedAt: string;
      cancelledAt: string;
      purchasedAt: string;
      purchasedById: string;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: string;
      8: string;
      9: string;
      10: string;
      11: string;
    }>;

    listingsCount(): NonPayableTransactionObject<string>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: (number | string | BN)[],
      arg3: (number | string | BN)[],
      arg4: string | number[]
    ): NonPayableTransactionObject<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: number | string | BN,
      arg4: string | number[]
    ): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    pause(): NonPayableTransactionObject<void>;

    paused(): NonPayableTransactionObject<boolean>;

    purchase(
      _listingId: number | string | BN,
      _buyerFarmId: number | string | BN,
      _buyerFarmAddress: string,
      _sfl: number | string | BN
    ): NonPayableTransactionObject<void>;

    removeGameRole(_game: string): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    resourceLimits(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    setCommunityTaxAddress(
      _communityTaxAddress: string
    ): NonPayableTransactionObject<void>;

    setMaxDailyListings(
      _maxDailyListings: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMaxSlots(
      _maxSlots: number | string | BN
    ): NonPayableTransactionObject<void>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unpause(): NonPayableTransactionObject<void>;
  };
  events: {
    Cancelled(cb?: Callback<Cancelled>): EventEmitter;
    Cancelled(options?: EventOptions, cb?: Callback<Cancelled>): EventEmitter;

    Listed(cb?: Callback<Listed>): EventEmitter;
    Listed(options?: EventOptions, cb?: Callback<Listed>): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    Purchased(cb?: Callback<Purchased>): EventEmitter;
    Purchased(options?: EventOptions, cb?: Callback<Purchased>): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Cancelled", cb: Callback<Cancelled>): void;
  once(
    event: "Cancelled",
    options: EventOptions,
    cb: Callback<Cancelled>
  ): void;

  once(event: "Listed", cb: Callback<Listed>): void;
  once(event: "Listed", options: EventOptions, cb: Callback<Listed>): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "Purchased", cb: Callback<Purchased>): void;
  once(
    event: "Purchased",
    options: EventOptions,
    cb: Callback<Purchased>
  ): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;
}
